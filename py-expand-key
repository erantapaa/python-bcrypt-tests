#!/usr/bin/env python
#
# vi: ft=py
#
# Usage:  py-expand-key count salt key

import bcrypt2 as bc2
import base64
import sys

def chunks(xs, k):
  """ Yield successive k-sized chunks from xs. """
  for i in xrange(0, len(xs), k):
    yield xs[i:i+k]

def main(args):
  (count,salt,key) = args[1:4]
  count = int(count)
  if count < 0:
    raise Exception("bad count")
  if len(salt) <> 16:
    raise Exception("bad salt: >"+salt+"<")
  if len(key) <= 0:
    raise Exception("bad key")

  bf = bc2.EksBlowfish()
  bf.expandkey(salt, key)
  rounds = 1<<count
  print "rounds:", rounds
  for i in xrange(rounds):
    bf.expandkey(0, key)
    bf.expandkey(0, salt)

  dumpks(bf)

def dumpks(bf):
  # dump the p-array
  for ps in chunks(bf.p_boxes, 8):
    print "p boxes:", ' '.join([ "%08x" % x for x in ps ])
  for i in range(0,4):
    prefix = "s box %d:" % i
    for ss in chunks(bf.s_boxes[i], 8):
      print prefix, ' '.join([ "%08x" % x for x in ss ])

def main1(args):
  salt = "1234567890123456";
  key = "asd";
  bf = bc2.EksBlowfish()
  bf.expandkey(salt, key)
  bf.expandkey(0, key)
  bf.expandkey(0, salt)
  dumpks(bf)

if __name__ == '__main__':
  main(sys.argv)

